//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/College/CollegeExampleAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CollegeExampleAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CollegeExampleAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CollegeExampleAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""50944328-e729-40c7-bf92-49415e98e346"",
            ""actions"": [
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""19ee45d6-8697-4261-be0c-21f22897cdae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7523d30b-1c5d-40f4-9f56-cb3d289cdfa7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WeakSkill"",
                    ""type"": ""Button"",
                    ""id"": ""3e191ecf-2a2d-42ac-900f-4330f2ec95d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StrongSkill"",
                    ""type"": ""Button"",
                    ""id"": ""8fcbb254-3c5e-445a-8967-abf35352da42"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c96319ea-024a-4a2f-8b5d-3e5dd2b06bf5"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeakSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8788d7f8-8e5b-4d12-b22f-e2eb883d633e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StrongSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4484ad4-9976-4bd9-a68b-a0b612cece73"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36a57f45-a200-467d-be60-b1f06e22bad0"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""9bf51fb3-6862-48fe-af2b-2e889ac0b22a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""02d44e08-097c-4d71-a7a9-93d3d8d5eb97"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""26065427-c2c0-40c2-9c43-a7085cb24be9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""09ceb321-1adf-40b6-9310-429b096001e8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""22efbf5d-82a8-40dc-b699-aae3368cd62a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d85c6a5f-03ef-4e2f-a0ab-a17567b77326"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Test = m_Player.FindAction("Test", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_WeakSkill = m_Player.FindAction("WeakSkill", throwIfNotFound: true);
        m_Player_StrongSkill = m_Player.FindAction("StrongSkill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Test;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_WeakSkill;
    private readonly InputAction m_Player_StrongSkill;
    public struct PlayerActions
    {
        private @CollegeExampleAction m_Wrapper;
        public PlayerActions(@CollegeExampleAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test => m_Wrapper.m_Player_Test;
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @WeakSkill => m_Wrapper.m_Player_WeakSkill;
        public InputAction @StrongSkill => m_Wrapper.m_Player_StrongSkill;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Test.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTest;
                @Test.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTest;
                @Test.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTest;
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @WeakSkill.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeakSkill;
                @WeakSkill.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeakSkill;
                @WeakSkill.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeakSkill;
                @StrongSkill.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStrongSkill;
                @StrongSkill.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStrongSkill;
                @StrongSkill.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStrongSkill;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Test.started += instance.OnTest;
                @Test.performed += instance.OnTest;
                @Test.canceled += instance.OnTest;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @WeakSkill.started += instance.OnWeakSkill;
                @WeakSkill.performed += instance.OnWeakSkill;
                @WeakSkill.canceled += instance.OnWeakSkill;
                @StrongSkill.started += instance.OnStrongSkill;
                @StrongSkill.performed += instance.OnStrongSkill;
                @StrongSkill.canceled += instance.OnStrongSkill;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnTest(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnWeakSkill(InputAction.CallbackContext context);
        void OnStrongSkill(InputAction.CallbackContext context);
    }
}
